"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = void 0;
const child_process_1 = require("child_process");
const util_1 = require("util");
const perf_hooks_1 = require("perf_hooks");
const ora = require("ora");
const chalk = require("chalk");
const autoJudgeError_1 = require("./utils/autoJudgeError");
const execAsync = (0, util_1.promisify)(child_process_1.exec);
const compile = (compileCommand) => __awaiter(void 0, void 0, void 0, function* () {
    const start = perf_hooks_1.performance.now();
    const spinner = ora('Compiling...').start();
    try {
        yield execAsync(compileCommand);
    }
    catch (error) {
        spinner.fail('Compile Failed');
        const compileErr = error;
        throw new autoJudgeError_1.default('Compile Error', compileErr.stderr);
    }
    const end = perf_hooks_1.performance.now();
    spinner.succeed('Compile Success');
    console.log(chalk.dim('- Compile Time: ' + ((end - start) / 1000).toFixed(2), 's'));
});
exports.compile = compile;
