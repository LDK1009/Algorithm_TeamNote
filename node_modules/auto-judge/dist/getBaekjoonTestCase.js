"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const https = require("https");
const cheerio = require("cheerio");
const fs = require("fs");
const ora = require("ora");
const chalk = require("chalk");
const perf_hooks_1 = require("perf_hooks");
const autoJudgeError_1 = require("./utils/autoJudgeError");
const getBaekjoonTestCase = (id) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const start = perf_hooks_1.performance.now();
        const spinner = ora('Fetching Test Case...').start();
        https
            .get({
            hostname: 'www.acmicpc.net',
            path: `/problem/${id}`,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
            },
        }, res => {
            if (res.statusCode === 404) {
                spinner.fail('Fetching Failed');
                reject(new autoJudgeError_1.default('Non-existent Problem ID', id.toString()));
                return;
            }
            let body = '';
            res.on('data', chunk => {
                body += chunk;
            });
            res.on('end', () => {
                const $ = cheerio.load(body);
                const testCases = [];
                $('[id*=sample-input]').each((i, el) => {
                    const input = $(el).text();
                    const output = $(el)
                        .parent()
                        .parent()
                        .next()
                        .find('[id*=sample-output]')
                        .text();
                    testCases[i] = { input, output };
                });
                resolve(testCases);
                spinner.succeed('Fetching Success');
                const end = perf_hooks_1.performance.now();
                console.log(chalk.dim('- Fetched Time: ' +
                    ((end - start) / 1000).toFixed(2) +
                    ' s\n'));
            });
        })
            .on('error', (error) => {
            reject(error);
        });
    });
});
const createBaekjoonInputFile = (id) => __awaiter(void 0, void 0, void 0, function* () {
    const testCases = yield getBaekjoonTestCase(id);
    if (testCases.length === 0) {
        throw new Error('No Test Case');
    }
    testCases.forEach((testCase, index) => {
        fs.writeFileSync(`auto_judge_temp/input_${index + 1}.txt`, testCase.input, 'utf-8');
    });
    return testCases;
});
exports.default = createBaekjoonInputFile;
