"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const getCommandByLanguage_1 = require("./getCommandByLanguage");
const compile_1 = require("./compile");
const runTestCases_1 = require("./runTestCases");
const fs = require("fs");
const deleteFolderRecursive_1 = require("./utils/deleteFolderRecursive");
const getBaekjoonTestCase_1 = require("./getBaekjoonTestCase");
const printResult_1 = require("./printResult");
const name_1 = require("./constants/name");
const autoJudgeError_1 = require("./utils/autoJudgeError");
const chalk = require("chalk");
const runAutoJudge = (platform, id, sourceFile, testcase, compileOption) => __awaiter(void 0, void 0, void 0, function* () {
    if (!fs.existsSync(name_1.directoryName))
        fs.mkdirSync(name_1.directoryName);
    try {
        if (platform !== 'boj')
            return;
        const testCases = (yield (0, getBaekjoonTestCase_1.default)(id));
        const { compileCommand, executeCommand } = (0, getCommandByLanguage_1.default)(sourceFile, compileOption);
        if (compileCommand !== null)
            yield (0, compile_1.compile)(compileCommand);
        const totalResult = yield (0, runTestCases_1.default)(testCases, executeCommand, testcase);
        (0, printResult_1.default)(id, sourceFile, totalResult);
    }
    catch (error) {
        if (error instanceof autoJudgeError_1.default) {
            console.error('ðŸš¨ ' + error.message);
            console.error(chalk.dim(error.body));
        }
        else {
            console.error('ðŸš¨ Unknown error caught:', error);
        }
    }
    finally {
        yield (0, deleteFolderRecursive_1.default)(name_1.directoryName);
    }
});
exports.default = runAutoJudge;
