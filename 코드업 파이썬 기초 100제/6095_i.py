n = int(input())  # 흰 돌의 개수
board = [[0] * 19 for _ in range(19)]  # 19*19 바둑판(2차원 배열) 생성

# 흰 돌의 개수만큼 좌표 입력 받고 흰 돌 놓기
for _ in range(n):
    x, y = map(int, input().split())
    board[x-1][y-1] = 1  # 해당 좌표에 바둑알을 놓는다. (인덱스에 맞게 1을 더한다)

# 각 요소를 개별적으로 출력
for row in board:
    for elem in row:
        print(elem, end=' ')
    print()

# 0으로 채운 2차원 배열 생성에 대해 배운다
# 2차원 배열의 출력 방법에 대해 알 수 있다.

'''
2차원 배열의 올바른 생성 방법

1. board = [[0] * 19] * 19 
2. board = [[0] * 19 for _ in range(19)]

board = [[0] * 19] * 19`와
board = [[0] * 19 for _ in range(19)]의 차이점은 리스트의 초기화 방법에 있습니다.
'''

'''
board = [[0] * 19] * 19` 의 문제점
이 코드는 첫 번째 리스트 `[0] * 19`를 19번 반복하여 리스트를 생성합니다.
하지만 여기서 주의할 점은, 이 코드는 실제로는 각 행이 동일한 객체를 참조합니다.

즉, 내부적으로는 다음과 같은 과정이 일어납니다.
1. `[0] * 19`을 통해 길이가 19이고 모든 요소가 0으로 초기화된 리스트를 만듭니다.
2. 이 리스트를 19번 반복하여 2차원 배열을 생성합니다. 하지만 모든 행이 동일한 리스트 객체를 참조합니다.

따라서 이 경우 한 행을 변경하면 다른 모든 행도 같이 변경될 수 있습니다.
예를 들어, `board[0][0] = 1`을 실행하면 모든 행의 첫 번째 요소가 1로 변경될 수 있습니다.
'''

'''
board = [[0] * 19 for _ in range(19)]의 사용 이유

board = [[0] * 19 for _ in range(19)]

위 코드는 리스트 컴프리헨션을 사용하여 각 행이 서로 다른 객체를 참조하도록 만듭니다.
각 행은 독립적으로 초기화되기 때문에 한 행의 변경이 다른 행에는 영향을 주지 않습니다.
따라서 안전하게 2차원 배열을 초기화하고 사용할 수 있습니다.

따라서 2차원 배열을 초기화할 때는 `[[0] * 19 for _ in range(19)]`과 같이 리스트 컴프리헨션을 사용하는 것이 좋습니다. 이 방법을 사용하면 각 행이 독립적인 객체를 참조하여 문제가 발생할 가능성을 줄일 수 있습니다.
'''




'''
리스트 컴프리헨션이란?
리스트 컴프리헨션(List Comprehension)은 파이썬에서 간결하게 리스트를 생성하는 방법으로 반복문과 조건문을 결합하여 리스트를 생성하는 표현식입니다.

<예시코드>
even_numbers = [i for i in range(10) if i % 2 == 0]
print(even_numbers)  # [0, 2, 4, 6, 8]

'''
